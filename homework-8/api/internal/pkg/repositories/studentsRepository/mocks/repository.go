// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_stu is a generated GoMock package.
package mock_stu

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "gitlab.ozon.dev/homework8/internal/pkg/model"
)

// MockStudentsRepo is a mock of StudentsRepo interface.
type MockStudentsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStudentsRepoMockRecorder
}

// MockStudentsRepoMockRecorder is the mock recorder for MockStudentsRepo.
type MockStudentsRepoMockRecorder struct {
	mock *MockStudentsRepo
}

// NewMockStudentsRepo creates a new mock instance.
func NewMockStudentsRepo(ctrl *gomock.Controller) *MockStudentsRepo {
	mock := &MockStudentsRepo{ctrl: ctrl}
	mock.recorder = &MockStudentsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentsRepo) EXPECT() *MockStudentsRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockStudentsRepo) Add(ctx context.Context, student *model.Student) (*model.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, student)
	ret0, _ := ret[0].(*model.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockStudentsRepoMockRecorder) Add(ctx, student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStudentsRepo)(nil).Add), ctx, student)
}

// GetById mocks base method.
func (m *MockStudentsRepo) GetById(ctx context.Context, id uint64) (*model.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*model.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockStudentsRepoMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockStudentsRepo)(nil).GetById), ctx, id)
}

// List mocks base method.
func (m *MockStudentsRepo) List(ctx context.Context) ([]*model.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*model.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStudentsRepoMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStudentsRepo)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockStudentsRepo) Update(ctx context.Context, student *model.Student) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, student)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockStudentsRepoMockRecorder) Update(ctx, student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStudentsRepo)(nil).Update), ctx, student)
}

// MockStudentsRepoCached is a mock of StudentsRepoCached interface.
type MockStudentsRepoCached struct {
	ctrl     *gomock.Controller
	recorder *MockStudentsRepoCachedMockRecorder
}

// MockStudentsRepoCachedMockRecorder is the mock recorder for MockStudentsRepoCached.
type MockStudentsRepoCachedMockRecorder struct {
	mock *MockStudentsRepoCached
}

// NewMockStudentsRepoCached creates a new mock instance.
func NewMockStudentsRepoCached(ctrl *gomock.Controller) *MockStudentsRepoCached {
	mock := &MockStudentsRepoCached{ctrl: ctrl}
	mock.recorder = &MockStudentsRepoCachedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentsRepoCached) EXPECT() *MockStudentsRepoCachedMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockStudentsRepoCached) Add(ctx context.Context, student *model.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, student)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockStudentsRepoCachedMockRecorder) Add(ctx, student interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStudentsRepoCached)(nil).Add), ctx, student)
}

// Get mocks base method.
func (m *MockStudentsRepoCached) Get(ctx context.Context, id uint64) (*model.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*model.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStudentsRepoCachedMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStudentsRepoCached)(nil).Get), ctx, id)
}

// GetMulti mocks base method.
func (m *MockStudentsRepoCached) GetMulti(ctx context.Context, ids []*uint64) ([]*model.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMulti", ctx, ids)
	ret0, _ := ret[0].([]*model.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMulti indicates an expected call of GetMulti.
func (mr *MockStudentsRepoCachedMockRecorder) GetMulti(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulti", reflect.TypeOf((*MockStudentsRepoCached)(nil).GetMulti), ctx, ids)
}
